{"version":3,"file":"static/js/348.5088656d.chunk.js","mappings":"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","sources":["components/GigAds.tsx","components/Listing.tsx","components/ListingModal.tsx","components/DateListLazy.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nexport type GigAd = {\n    image: { url: string }[];\n    link: string;\n    Active: boolean;\n};\n\nexport const GigAds = ({ adId, gigAds }: { adId: number; gigAds: GigAd[] }) => {\n    // const [imageURL, setImageURL] = useState<string>(\"\");\n\n    // useEffect(() => {\n    //     const checkImage = (checkurl: string) => {\n    //         const imageExists = localStorage.getItem(checkurl);\n    //         if (imageExists) {\n    //             console.log(imageExists);\n    //             setImageURL(imageExists);\n    //         } else {\n    //             setImageURL(checkurl);\n    //             localStorage.setItem(checkurl, checkurl);\n    //         }\n    //     };\n\n    //     gigAds[adId] && checkImage(gigAds[adId].image[0].url);\n    // }, []);\n\n    return gigAds[adId] ? (\n        <div className=\"advert\">\n            <a href={gigAds[adId].link} target=\"_blank\" rel=\"noreferrer\">\n                <img src={gigAds[adId].image[0].url} alt=\"\" />\n            </a>\n        </div>\n    ) : (\n        <></>\n    );\n};\n","import React from \"react\";\nimport { TListing } from \"../types/types\";\nimport { EventSchema } from \"./EventSchema\";\n\nexport const Listing = ({ listing }: { listing: TListing }) => {\n    const gig = listing;\n    return (\n        <>\n            {gig.id <= 300 && <EventSchema gig={gig} />}\n            <li className=\"event-wrapper listing\">\n                <div className=\"event-title\">\n                    {gig.artist.replace(/&amp;/g, \"&\")}\n                </div>\n                <div className=\"event-venue\">\n                    <div className=\"name\">\n                        {gig.name.replace(/&amp;/g, \"&\")}, {gig.suburb}\n                    </div>\n                    <div className=\"address\">{gig.address}</div>\n                </div>\n                <div className=\"event-time\">{gig.start}</div>\n            </li>\n        </>\n    );\n};\n","import React from \"react\";\nimport PageListing from \"./PageListing\";\nimport { Icon, Modal } from \"semantic-ui-react\";\nimport { TListing } from \"../types/types\";\nimport { Listing } from \"./Listing\";\n\nexport const ListingModal = ({ listing }: { listing: TListing }) => {\n    const [open, setOpen] = React.useState(false);\n\n    return (\n        <Modal\n            onClose={() => setOpen(false)}\n            onOpen={() => setOpen(true)}\n            open={open}\n            trigger={\n                <div>\n                    <Listing listing={listing} />\n                </div>\n            }\n        >\n            <Modal.Content>\n                <PageListing listing={listing} />\n            </Modal.Content>\n            <Modal.Actions>\n                <Icon\n                    onClick={() => setOpen(false)}\n                    name={\"window close\"}\n                    size={\"big\"}\n                ></Icon>\n            </Modal.Actions>\n        </Modal>\n    );\n};\n","import { Fragment, useMemo, useState } from \"react\";\nimport { isMobile } from \"react-device-detect\";\nimport { TDate, TListing } from \"../types/types\";\nimport { GigAd, GigAds } from \"./GigAds\";\nimport { ListingModal } from \"./ListingModal\";\n\n// type Props = {\n//     giglist: TDate[];\n//     gigAds: GigAd[];\n//     searchMode: boolean;\n//     filterByDate: (date: TDate) => void;\n// };\n\nconst DateListLazy = ({ giglist, gigAds, searchMode, filterByDate }) => {\n    const getRandomInt = (min, max) => {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    };\n\n    const [daysToShow, setDaysToShow] = useState(365);\n    const adStart = getRandomInt(0, 100);\n    let numberOfAdsToShow = 28;\n\n    const getCondition = (index) => {\n        if (isMobile) {\n            if (index < daysToShow) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    return (\n        <>\n            {giglist.length &&\n                giglist\n                    .filter((d, index) => getCondition(index))\n                    .map((date, index) => {\n                        const adId = (index + adStart) % gigAds.length;\n\n                        return (\n                            <ul className=\"day\" key={index}>\n                                <div\n                                    className=\"date\"\n                                    onClick={() => {\n                                        filterByDate(date);\n                                    }}\n                                >\n                                    <span\n                                        style={{\n                                            letterSpacing: \"-0.2rem\",\n                                        }}\n                                    >\n                                        {date.datestring}\n                                    </span>\n                                </div>\n                                <Listings listings={date.listings} />\n\n                                {!searchMode && index < numberOfAdsToShow && (\n                                    <GigAds adId={adId} gigAds={gigAds} />\n                                )}\n                            </ul>\n                        );\n                    })}\n        </>\n    );\n};\n\nconst Listings = ({ listings }) => {\n    return (\n        <>\n            {!!listings.length &&\n                listings.map((listing, index) => {\n                    const duplicateListing =\n                        index > 1 &&\n                        listing.artist === listings[index - 1].artist &&\n                        listing.date_formatted ===\n                            listings[index - 1].date_formatted;\n\n                    const gig = listing;\n\n                    const event_url =\n                        `https://giglist.com.au/gig-${gig.artist}-${gig.name}-${gig.date}`\n                            .replace(/\\s+/g, \"-\")\n                            .toLowerCase();\n                    return (\n                        !duplicateListing && (\n                            <Fragment key={index}>\n                                <a style={{ display: \"none\" }} href={event_url}>\n                                    Event Link\n                                </a>\n                                <ListingModal listing={listing} />\n                            </Fragment>\n                        )\n                    );\n                })}\n        </>\n    );\n};\n\nexport default DateListLazy;\n"],"names":["GigAds","adId","gigAds","className","href","link","target","rel","src","image","url","alt","Listing","gig","listing","id","EventSchema","artist","replace","name","suburb","address","start","ListingModal","React","open","setOpen","Modal","onClose","onOpen","trigger","PageListing","Icon","onClick","size","Listings","listings","length","map","index","duplicateListing","date_formatted","event_url","date","toLowerCase","Fragment","style","display","min","max","giglist","searchMode","filterByDate","useState","daysToShow","adStart","Math","ceil","floor","random","filter","d","isMobile","getCondition","letterSpacing","datestring"],"sourceRoot":""}